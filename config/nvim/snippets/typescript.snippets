# Angular Component
snippet ng2-component
	import { Component, OnInit } from '@angular/core';
	@Component({
	      moduleId: module.id,
	      selector: '${1:selector}',
	      templateUrl: '${2:name}.component.html'
	})
	export class ${3:ComponentName}Component implements OnInit {
	      constructor() { }

	      ngOnInit() { }
	      ${4}
	}

# Angular Service
snippet ng2-service
	import { Injectable } from '@angular/core';

	@Injectable()
	export class ${1:ServiceName}Service {
	${2}
	      constructor() { }

	}

# Angular Pipe
snippet ng2-pipe
	import { Pipe, PipeTransform } from '@angular/core';

	@Pipe({
	      name: '${1:name}'
	})

	export class ${2:PipeName}Pipe implements PipeTransform {
	      transform(value: any, args: any[]): any {
		      ${3}
	      }
	}

# Angular Routes
snippet ng2-routes
	@Routes([
	      { path: '/${1:path}', component: ${2:Component} }${3}
	])

# Angular RouteDefinition
snippet ng2-route-path
	{ path: '/${1:path}', component: ${2:Component} }${3}

# Http.get
snippet ng2-http-get
	return this.http.get('${1:url}')
	      .map((res: Response) => res.json()${2});

# Subscribe
snippet ng2-subscribe
	this.${1:service}.${2:function}
	      .subscribe(${3:arg} => this.${4:property} = ${5:arg});
	${6}

# Angular Bootstrapping
snippet ng2-bootstrap
	import { enableProdMode } from '@angular/core';
	import { bootstrap } from '@angular/platform-browser-dynamic';

	import { ${1:AppComponent} } from './${2:name}.component';

	// enableProdMode();

	bootstrap(${3:AppComponent})
	      .then(success => console.log(`Bootstrap success`))
	      .catch(error => console.log(error));
	${4}

# AppComponent
snippet ng2-component-root
	import { Component } from '@angular/core';
	import { HTTP_PROVIDERS } from '@angular/http';
	import { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';
	import 'rxjs/Rx'; // load the full rxjs

	@Component({
	      moduleId: module.id,
	      selector: '${1:selector}',
	      templateUrl: '${2:name}.component.html',
	      directives: [ROUTER_DIRECTIVES],
	      providers: [
		HTTP_PROVIDERS,
		ROUTER_PROVIDERS
	      ]
	})
	@Routes([
	      ${3}
	])
	export class AppComponent {}
snippet ref
	/// <reference path="${1}"/>
snippet des
	describe('${1}', () => {
	});
snippet it
	it('${1}', () => {
	});
# dojo/AMD snippets
snippet def
	define([
		${1}
	], function (${2}) {
	});
snippet dec
	declare(${1}, {
	});
snippet req
	require([
		${1}
	], function (${2}) {
	});
snippet inh
	this.inherited(arguments);
# basic snippets
snippet :
	${1:key}: ${2:value}
snippet :f
	${1:method_name}: function (${2:args}) {
	}
snippet fn
	function () {
	}
snippet fun
	function ${1:name}(${2:args}) {
	}
snippet iife
	(function () {
		${1}
	})();
snippet interval
	setInterval(function () {
		${2}
	}, ${1});
snippet timeout
	setTimeout(function () {
		${2}
	}, ${1});
# log snippets
snippet log
	console.log(${1});
snippet lred
	console.log('%c${1}', 'font-weight:bold;color:red;');
snippet lgreen
	console.log('%c${1}', 'font-weight:bold;color:green;');
snippet lblue
	console.log('%c${1}', 'font-weight:bold;color:blue;');
snippet lpurple
	console.log('%c${1}', 'font-weight:bold;color:purple;');
snippet lor
	console.log('%c${1}', 'font-weight:bold;color:orange;');
snippet ctab
	console.table(${1});
snippet debug
	console.log('[DEBUG] ${1}');
snippet trace
	console.trace();
snippet des
	describe('${1}', function () {
	});
snippet it
	it('${1}', function () {
	});
# dojo snippets
snippet widget
	define([
		'dojo/_base/declare',
		'dijit/_WidgetBase',
		'dijit/_TemplatedMixin',
		'dijit/_WidgetsInTemplateMixin',
		'dojo/text!./templates/${1}.html'
	], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, template) {
		return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
			templateString: template
		});
	});
snippet doc
	/**
	 * ${1}
	 */
